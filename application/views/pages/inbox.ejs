<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <%- include('../partials/header', { title: 'Messages' }) %>
  
  <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x/dist/cdn.min.js" defer></script>
  <script src="/socket.io/socket.io.js"></script>
  
  <!-- User ID div -->
  <div id="user-data" data-user-id="<%= userId %>" style="display: none;"></div>
  
 <style>
  /* Container Styles */
  .container {
    display: flex;
    height: calc(100vh - 60px);
    flex-direction: row;
  }

  .sidebar {
    width: 280px;
    border-right: 1px solid #ddd;
    background-color: #e5ca79;
    padding: 15px;
    overflow-y: auto;
    transition: transform 0.3s ease;
  }

  .conversation-item {
    background-color: #ffffff;
    border: 1px solid #ccc;
    padding: 12px;
    border-radius: 8px;
    margin-bottom: 8px;
    cursor: pointer;
    transition: background 0.2s, border 0.2s;
    
  }

  .conversation-item:hover {
    background-color: #d0c3f1;
    border-color: #e7e1f4;
  }

  .conversation-item.active {
    background-color: #d0c3f1;
    border-color: #7c3aed;
  }

  .conversation-time {
    font-size: 12px;
    color: #666;
    margin-top: 4px;
  }

  .chat-window {
    display: flex;
    flex-direction: column;
    flex: 1;
    height: 100%;
    overflow: hidden;
  }

  .chat-header {
    padding: 15px;
    border-bottom: 1px solid #ddd;
    background-color: #f9f9f9;
  }

  .chat-body {
    flex: 1;
    overflow-y: auto;
    padding: 15px;
    display: flex;
    flex-direction: column;
  }

  .chat-message {
    max-width: 70%;
    padding: 10px 16px;
    border-radius: 16px;
    margin: 8px 0;
    background-color: #bcbcbc;
  }

  .chat-message.user {
    align-self: flex-end;
    background-color: #d0c3f1;
  }

  .message-time {
    font-size: 12px;
    color: #777;
    margin-top: 5px;
  }

  .chat-input {
    display: flex;
    padding: 12px 16px;
    border-top: 1px solid #ddd;
    background: white;
  }

  .chat-input input {
    flex: 1;
    padding: 10px 16px;
    border: 1px solid #ccc;
    border-radius: 9999px;
    outline: none;
  }

  .chat-input button {
    background: none;
    border: none;
    margin-left: 10px;
    cursor: pointer;
    padding: 6px;
  }

  .chat-input svg {
    width: 24px;
    height: 24px;
    stroke: black;
  }

  .no-conversation {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
    color: #666;
    font-size: 1.1rem;
  }

  /* Mobile responsiveness */
@media (max-width: 768px) {
  .container {
    flex-direction: column;
    position: relative;
  }

  .sidebar {
    position: fixed;
    top: 60px;
    left: 0;
    height: calc(100vh - 60px);
    width: 80%;
    max-width: 300px;
    background-color: #e5ca79;
    transform: translateX(-100%);
    transition: transform 0.3s ease-in-out;
    z-index: 1000;
    box-shadow: 2px 0 10px rgba(0,0,0,0.1);
  }

  .sidebar-open .sidebar {
    transform: translateX(0);
  }

  .sidebar-toggle-btn {
    background-color: #f1f1f1;
    color: #111;
    border: 1px solid #bbb;
    border-radius: 8px;
    padding: 8px 14px;
    font-size: 10px;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    box-shadow: inset 0 -1px 0 rgba(0,0,0,0.1);
    transition: background 0.2s, box-shadow 0.2s;
    }

    

  .sidebar-backdrop {
    display: none;
    position: fixed;
    top: 60px;
    left: 0;
    width: 100%;
    height: calc(100vh - 60px);
    background: rgba(0,0,0,0.3);
    z-index: 900;
  }

  .sidebar-open .sidebar-backdrop {
    display: block;
  }
}
/* Hide toggle on desktop, show on mobile */
  .responsive-toggle {
    display: none;
  }

  @media (max-width: 768px) {
    .responsive-toggle {
      display: block;
    }
  }


</style>

</head>


<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-JHX65F1PNK"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-JHX65F1PNK');
</script>

<body>
  <div class="container" x-data="messagesApp()" x-init="init()" x-bind:class="{'sidebar-open': sidebarOpen}">  
    <!-- Backdrop for sidebar on mobile -->
    <div class="sidebar-backdrop" @click="sidebarOpen = false"></div>
  
    <!-- Sidebar with conversations -->
    <div class="sidebar">
      <template x-for="(conversation, index) in conversations" :key="index">
        <div class="conversation-item" 
             :class="{ 'active': index === activeConversation }"
             @click="activeConversation = index; sidebarOpen = false"">
          <div>
            <strong x-text="conversation.listingName"></strong> - 
            <span x-text="conversation.withUser"></span>
          </div>
          <div class="conversation-time" x-text="formatTime(conversation.lastMessageTime)"></div>
        </div>
      </template>
    </div>
    
   <!-- Chat Window -->
    <div class="chat-window">
      <!-- Chat header -->
      <div class="chat-header">
          <!-- Mobile Toggle Button -->
          <button class="sidebar-toggle-btn responsive-toggle" @click="sidebarOpen = !sidebarOpen">
            â˜° View All Conversations
          </button>


        <p style="text-align: center; color: #555;">
          Conversation about <strong x-text="currentConversation.listingName"></strong> with 
          <strong x-text="currentConversation.withUser"></strong>
        </p>

        <p style="text-align: center; margin-top: 0.25rem;">
          <a 
            :href="`/listing/${currentConversation.listingId}`"
            style="color: #7b5cff; text-decoration: none; font-weight: 500;"
            @mouseover="$event.target.style.textDecoration='underline'"
            @mouseout="$event.target.style.textDecoration='none'"
          >
            View Product
          </a>
        </p>


      </div>

      <!-- Chat body with messages -->
      <div class="chat-body">
        <template x-for="(msg, index) in currentConversation.messages" :key="index">
          <div class="chat-message" :class="{ 'user': msg.fromMe }">
            <span x-text="msg.text"></span>
            <div class="message-time" x-text="formatMessageTime(msg.time)"></div>
          </div>
        </template>
      </div>

      <!-- Chat input -->
      <div class="chat-input">
        <input 
          type="text" 
          placeholder="Type a message..." 
          x-model="newMessage" 
          @keydown.enter.prevent="sendMessage">
        <button @click="sendMessage">
          <svg fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M5 12h14m-7-7l7 7-7 7" />
          </svg>
        </button>
      </div>
    </div>

      
      <!-- No conversation selected message -->
      <template x-if="!currentConversation">
        <div class="no-conversation">
          <p>Select a conversation or start a new one.</p>
        </div>
      </template>
    </div>
  </div>
  
  <script>
    // Get user ID from data attribute
    const userDataElement = document.getElementById('user-data');
    const currentUserId = userDataElement ? parseInt(userDataElement.getAttribute('data-user-id')) : null;
    
    function messagesApp() {
      return {
        conversations: [],
        activeConversation: 0,
        newMessage: '',
        socket: null,
        sidebarOpen: false,
        
        init() {
          console.log('Initializing chat app');
          
          // Connect to Socket.IO
          this.socket = io({
            auth: { userId: currentUserId }
          });
          
          // Get URL parameters for new conversation
          const urlParams = new URLSearchParams(window.location.search);
          const listingId = urlParams.get('listing');
          const sellerId = urlParams.get('seller');
          const listingName = urlParams.get('name');
          
          console.log('URL parameters:', { listingId, sellerId, listingName });
          
          // Load existing conversations
          this.loadConversations().then(() => {
            // Check if we need to create a new conversation
            if (listingId && sellerId) {
              this.fetchSellerAndCreateChat(listingId, sellerId, listingName);
            }
          });
          
          // Set up socket event listeners
          this.setupSocketListeners();
        },
        
        async loadConversations() {
          try {
            console.log('Loading conversations...');
            const response = await fetch('/api/chats');
            const data = await response.json();
            
            if (data.success) {
              this.conversations = data.chats || [];
              console.log('Loaded conversations:', this.conversations);
            }
          } catch (error) {
            console.error('Failed to load conversations:', error);
          }
        },
        
        async fetchSellerAndCreateChat(listingId, sellerId, listingName) {
          try {
            console.log('Fetching seller details for ID:', sellerId);
            const response = await fetch(`/api/user/${sellerId}`);
            const data = await response.json();
            
            let sellerName = 'Seller';
            if (data.success) {
              sellerName = `${data.user.firstName} ${data.user.lastName}`;
            }
            
            this.createNewChat(listingId, sellerId, sellerName, listingName);
          } catch (error) {
            console.error('Error fetching seller details:', error);
            // Create chat anyway with default name
            this.createNewChat(listingId, sellerId, 'Seller', listingName);
          }
        },
        
        createNewChat(listingId, sellerId, sellerName, listingName) {
          console.log('Creating new chat:', { listingId, sellerId, sellerName, listingName });
          
          // Check if this conversation already exists
          const existingChatIndex = this.conversations.findIndex(
            chat => chat.listingId == listingId && chat.withUserId == sellerId
          );
          
          if (existingChatIndex !== -1) {
            console.log('Conversation already exists, switching to it');
            // If conversation exists, switch to it
            this.activeConversation = existingChatIndex;
            return;
          }
          
          console.log('Creating new conversation object');
          // Create new chat
          const newChat = {
            listingId: listingId,
            listingName: listingName || 'Listing',
            withUserId: sellerId,
            withUser: sellerName || 'Seller',
            lastMessageTime: new Date(),
            messages: []
          };
          
          // Add to beginning of chats array
          this.conversations.unshift(newChat);
          
          // Set as active chat
          this.activeConversation = 0;
          
          // Send initial message
          const initialMessage = `Hi! I'm interested in your listing "${listingName || 'your item'}".`;
          this.sendInitialMessage(sellerId, listingId, initialMessage);
        },
        
        sendInitialMessage(receiverId, listingId, message) {
          console.log('Sending initial message:', { receiverId, listingId, message });
          
          // Send via Socket.IO
          this.socket.emit('send-message', {
            listingId: listingId,
            receiverId: receiverId,
            message: message
          });
          
          // Add to UI
          this.conversations[0].messages.push({
            text: message,
            fromMe: true,
            time: new Date()
          });
          
          // Update last message time
          this.conversations[0].lastMessageTime = new Date();
        },
        
        setupSocketListeners() {
          // Handle incoming messages
          this.socket.on('receive-message', (data) => {
            console.log('Received message:', data);
            this.receiveMessage(data);
          });
          
          // Handle message sent confirmation
          this.socket.on('message-sent', (data) => {
            console.log('Message sent confirmation:', data);
          });
          
          // Handle message errors
          this.socket.on('message-error', (data) => {
            console.error('Message send error:', data.error);
            alert('Failed to send message: ' + data.error);
          });
        },
        
        receiveMessage(data) {
          const { senderId, listingId, message, timestamp } = data;
          
          // Find conversation or create new one
          const conversationIndex = this.findConversation(listingId, senderId);
          
          if (conversationIndex !== -1) {
            // Add to existing conversation
            this.conversations[conversationIndex].messages.push({
              text: message,
              fromMe: false,
              time: new Date(timestamp)
            });
            
            // Update last message time
            this.conversations[conversationIndex].lastMessageTime = new Date(timestamp);
          } else {
            // Create new conversation
            this.conversations.push({
              listingId: listingId,
              listingName: data.listingName || 'Listing',
              withUserId: senderId,
              withUser: data.senderName || 'User',
              lastMessageTime: new Date(timestamp),
              messages: [{
                text: message,
                fromMe: false,
                time: new Date(timestamp)
              }]
            });
          }
        },
        
        findConversation(listingId, userId) {
          return this.conversations.findIndex(
            conv => conv.listingId == listingId && conv.withUserId == userId
          );
        },
        
        get currentConversation() {
          return this.conversations.length > 0 ? this.conversations[this.activeConversation] : null;
        },
        
        sendMessage() {
          if (!this.newMessage.trim() || !this.currentConversation) return;
          
          const message = this.newMessage.trim();
          const conversation = this.currentConversation;
          
          console.log('Sending message:', { 
            listingId: conversation.listingId,
            receiverId: conversation.withUserId,
            message
          });
          
          // Send via Socket.IO
          this.socket.emit('send-message', {
            listingId: conversation.listingId,
            receiverId: conversation.withUserId,
            message: message
          });
          
          // Add to UI
          conversation.messages.push({
            text: message,
            fromMe: true,
            time: new Date()
          });
          
          // Update last message time
          conversation.lastMessageTime = new Date();
          
          // Clear input
          this.newMessage = '';
        },
        
        formatTime(time) {
          if (!time) return '';
          const date = new Date(time);
          return date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        },
        
        formatMessageTime(time) {
          if (!time) return '';
          const date = new Date(time);
          return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }
      };
    }
  </script>
</body>
</html>