<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <%- include('../partials/header', { title: 'Your Listings' }) %>
        <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x/dist/cdn.min.js" defer></script>
        <style>
            .page-container {
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
            }

            .page-title {
                font-size: 2.5rem;
                font-weight: bold;
                margin-bottom: 1.5rem;
                text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
            }

            .filter-section {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 2rem;
            }

            .filter-button {
                background-color: #f5f5f5;
                border: none;
                padding: 10px 20px;
                font-weight: bold;
                border-radius: 4px;
                cursor: pointer;
            }

            .listings-container {
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
                gap: 20px;
            }

            .listing-card {
                border: 1px solid #e0e0e0;
                border-radius: 8px;
                overflow: hidden;
                transition: transform 0.2s;
                background-color: white;
            }

            .listing-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
            }

            .listing-image {
                width: 100%;
                height: 200px;
                object-fit: cover;
                background-color: #f0f0f0;
            }

            .listing-details {
                padding: 15px;
            }

            .listing-name {
                font-size: 1.2rem;
                font-weight: bold;
                margin-bottom: 8px;
            }

            .listing-price {
                font-size: 1.1rem;
                margin-bottom: 8px;
                color: #444;
            }

            .listing-category {
                display: inline-block;
                background-color: #e6d5f5;
                padding: 5px 10px;
                border-radius: 20px;
                font-size: 0.9rem;
                margin-bottom: 10px;
            }

            .listing-actions {
                display: flex;
                background-color: #e8f4fd;
                padding: 10px;
                justify-content: space-between;
            }

            .action-button {
                padding: 8px 12px;
                background: none;
                border: none;
                cursor: pointer;
                font-weight: bold;
                color: #444;
            }

            .action-button:hover {
                text-decoration: underline;
            }

            .empty-state {
                text-align: center;
                padding: 40px;
                background-color: #f9f9f9;
                border-radius: 8px;
            }

            .create-button {
                display: inline-block;
                background-color: #d6c1f0;
                color: white;
                padding: 12px 24px;
                margin-top: 15px;
                border-radius: 6px;
                font-weight: bold;
                text-decoration: none;
                transition: background-color 0.2s;
            }

            .create-button:hover {
                background-color: #b19cd9;
            }

            .footer-bar {
                background-color: #d6c1f0;
                height: 10px;
                width: 100%;
                position: fixed;
                bottom: 0;
                left: 0;
            }

            .primary-button {
                display: inline-block;
                background-color: #d6c1f0;
                color: #444;
                padding: 12px 24px;
                margin-bottom: 20px;
                border-radius: 6px;
                font-weight: bold;
                text-decoration: none;
                transition: all 0.2s ease;
                border: none;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }

            .primary-button:hover {
                background-color: #b19cd9;
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
            }

            /* Add these new styles for the sold status */
            .status-badge {
                display: inline-block;
                padding: 4px 10px;
                border-radius: 20px;
                font-size: 0.9rem;
                font-weight: bold;
                margin-bottom: 8px;
                background-color: #ff6b6b;
                color: white;
            }
            
            .sold-text {
                font-weight: bold;
                color: #ff6b6b;
            }
            
            .listing-card.sold .listing-image-container {
                position: relative;
            }
            
            .listing-card.sold .listing-image-container::after {
                content: "SOLD";
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%) rotate(-30deg);
                font-size: 2rem;
                font-weight: bold;
                color: #ff6b6b;
                border: 3px solid #ff6b6b;
                padding: 5px 10px;
                background-color: rgba(255, 255, 255, 0.7);
            }
        </style>
</head>

<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-JHX65F1PNK"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag() { dataLayer.push(arguments); }
    gtag('js', new Date());

    gtag('config', 'G-JHX65F1PNK');
</script>

<body>
    <div class="page-container" x-data="listingsApp()" x-init="init">
        <!-- Page Title -->
        <h1 class="page-title">Your listings</h1>

        <a href="/create-listing" class="primary-button">Create a new listing</a>

        <!-- Listings Container -->
        <div class="listings-container" x-show="listings && listings.length > 0">
            <template x-for="(listing, index) in listings" :key="index">
                <div class="listing-card" :class="{ 'sold': listing.listing_status === 'sold' }">
                    <div class="listing-image-container">
                        <template x-if="listing.primary_image">
                            <img class="listing-image" :src="'/images/'+ listing.primary_image"
                                :alt="listing.listing_name">
                        </template>
                        <template x-if="!listing.primary_image">
                            <div class="listing-image no-image">No image available</div>
                        </template>
                    </div>
                    <div class="listing-details">
                        <div class="listing-name" x-text="listing.listing_name"></div>
                        <div class="listing-price" x-text="'$' + listing.price"></div>
                        <div class="listing-category" x-text="getCategoryName(listing.category_id)"></div>
                        
                        <!-- Show SOLD badge if item is sold -->
                        <div x-show="listing.listing_status === 'sold'" class="status-badge">SOLD</div>
                    </div>
                    <div class="listing-actions">
                        
                        <!-- Only show Mark as sold button if item is not already sold -->
                        <button class="action-button" 
                                x-show="listing.listing_status !== 'sold'"
                                @click="markAsSold(listing.listing_id)">
                            Mark as sold
                        </button>
                        
                        <!-- Show sold status if already sold -->
                        <span class="sold-text" x-show="listing.listing_status === 'sold'">SOLD</span>
                    </div>
                </div>
            </template>
        </div>

        <!-- Empty State -->
        <div class="empty-state" x-show="!listings || listings.length === 0">
            <h2>No listing yet</h2>
            <p>Create a new listing to start selling your items!</p>
            <a href="/create-listing" class="create-button">Create Listing</a>
        </div>

        <!-- Footer Bar -->
        <div class="footer-bar"></div>
    </div>

    <script>
        function listingsApp() {
            return {
                listings: null,
                fetchStatus: 'Not started',
                currentUserId: null, // Will store the current user's ID
                categories: [
                    { id: 1, name: 'Electronics' },
                    { id: 2, name: 'Books' },
                    { id: 3, name: 'Services' },
                    { id: 4, name: 'Clothes'},
                    { id: 5, name: 'Furniture'},
                    { id: 6, name: 'School Supplies'},
                    { id: 7, name: 'Appliances & Tools'}

                ],

                init() {
                    console.log('Alpine component initialized');
                    // Get current user ID
                    this.getCurrentUser();
                    this.fetchListings();
                },

                // Get current user ID for showing/hiding appropriate buttons
                getCurrentUser() {
                    fetch('/api/current-user')
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                this.currentUserId = data.user.id;
                                console.log('Current user ID:', this.currentUserId);
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching current user:', error);
                        });
                },

                fetchListings() {
                    console.log('Fetching listings...');
                    this.fetchStatus = 'Fetching...';

                    fetch('/api/mylistings')
                        .then(response => {
                            console.log('Response status:', response.status);
                            this.fetchStatus = 'Response received: ' + response.status;

                            if (!response.ok) {
                                if (response.status === 401) {
                                    console.log('User not logged in');
                                    this.fetchStatus = 'Not logged in';
                                    this.listings = [];
                                    return null;
                                }
                                throw new Error('Failed to fetch listings: ' + response.status);
                            }
                            return response.json();
                        })
                        .then(data => {
                            if (data) {
                                console.log('Data received:', data);

                                // Handle the correct response format
                                if (data.listings && Array.isArray(data.listings)) {
                                    this.listings = data.listings;
                                    this.fetchStatus = 'Data loaded: ' + data.listings.length + ' listings';
                                } else if (Array.isArray(data)) {
                                    this.listings = data;
                                    this.fetchStatus = 'Data loaded: ' + data.length + ' listings';
                                } else {
                                    console.error('Unexpected data format:', data);
                                    this.listings = [];
                                    this.fetchStatus = 'Error: Unexpected data format';
                                }
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching listings:', error);
                            this.fetchStatus = 'Error: ' + error.message;
                            this.listings = []; // Empty array on error
                        });
                },

                getCategoryName(categoryId) {
                    // Force convert categoryId to a number (0 if invalid)
                    const id = parseInt(categoryId);

                    console.log(id);
                    // Find the category with matching id
                    const category = this.categories.find(c => c.id === id);
                    // Return the category name or "Uncategorized"
                    return category ? category.name : 'Uncategorized';
                },

                markAsSold(listingId) {
                    if (!listingId) return;

                    console.log('Marking listing as sold, ID:', listingId);

                    // Update listing status
                    if (confirm('Mark this item as sold?')) {
                        // This matches your server route: router.put('/listings/:id/status', ...)
                        fetch(`/api/listings/${listingId}/status`, {
                            method: 'PUT',  // Must be PUT to match your server route
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ 
                                status: 'sold'
                            }),
                        })
                        .then(response => {
                            console.log('Response status:', response.status);
                            
                            if (!response.ok) {
                                return response.text().then(text => {
                                    console.error('Error response body:', text);
                                    throw new Error(`Server returned status ${response.status}: ${text}`);
                                });
                            }
                            
                            return response.json();
                        })
                        .then(data => {
                            console.log('Status updated successfully:', data);
                            
                            // Update local data to reflect the change
                            this.listings = this.listings.map(listing => {
                                if (listing.listing_id === listingId) {
                                    console.log('Updating listing in UI:', listing.listing_name);
                                    return { ...listing, listing_status: 'sold' };
                                }
                                return listing;
                            });

                            // Success message
                            alert('Item marked as sold!');
                        })
                        .catch(error => {
                            console.error('Error updating listing status:', error);
                            alert('Failed to update listing status: ' + error.message);
                        });
                    }
                }
            };
        }
    </script>
</body>

</html>
